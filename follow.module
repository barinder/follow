<?php

/**
 * @file
 *   Allows users to add links to their social network profiles.
 */

use Drupal\follow\FollowLink;
use Drupal\Core\Url;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Form\FormStateInterface;

require_once 'follow.inc';

/**
 * Implements hook_help().
 */
function follow_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'follow.user':
    case 'follow.admin':
      return t('Please copy and paste the url for your public profile or page for each service you would like to display in the block. Links need to match the domain of the service in question. If you want to hide the title of the links, enter "&lt;none&gt;" in the customized name.');
  }
}

/**
 * Implements hook_theme().
 */
function follow_theme() {
  $items = array();

  $items['follow_links'] = array(
    'variables' => array(
      'links' => array(),
      'networks' => array(),
      'alignment' => NULL,
      // The type of the links, 'user' or 'site'.
      'type' => NULL,
    ),
    'function' => 'theme_follow_links',
  );
  $items['follow_link'] = array(
    'variables' => array('link' => NULL, 'title' => NULL),
    'function' => 'theme_follow_link',
  );
  $items['follow_css'] = array(
    'variables' => array(
      'icon_style_name' => NULL,
      'icon_style' => array(),
      'icon_path' => NULL,
      'selector_prefix' => '',
      'css_overrides' => '',
    ),
  );

  return $items;
}

/**
 * Implements hook_preprocess_page().
 */
function follow_preprocess_page(&$variables) {
  // Expose the site follow links as a variable to the page template.
  if ($links = FollowLink::load()) {
    $args = array(
      'links' => $links,
      'networks' => follow_networks_load(),
      'alignment' => \Drupal::config('follow.settings')->get('follow_site_alignment'),
      'type' => 'site',
    );
    $variables['follow_site'] = _theme('follow_links', $args);
  }
}

/**
 * Implements hook_preprocess_follow_css().
 */
function template_preprocess_follow_css(&$variables) {
  // Allow for template overrides based on style name.
  $variables['theme_hook_suggestions'][] = 'follow-css__' . $variables['icon_style_name'];

  // Load up the style array.
  if ($style = follow_get_icon_style($variables['icon_style_name'])) {
    $variables['icon_style'] = $style;
  }

  // Normalize the selector prefix to have a single space at the end.
  if (!empty($variables['selector_prefix'])) {
    $variables['selector_prefix'] = rtrim($variables['selector_prefix']) . ' ';
  }

  // Set up the icon path.
  if (empty($variables['icon_path'])) {
    $variables['icon_path'] = _follow_style_icon_path($style);
  }

  // Convert the CSS overrides into a string.
  if (empty($variables['css_overrides']) && !empty($style['css-overrides'])) {
    $css_overrides = $variables['selector_prefix'] . "a.follow-link {\n";
    foreach ($style['css-overrides'] as $line) {
      $css_overrides .= "  $line\n";
    }
    $variables['css_overrides'] = $css_overrides . "}\n";
  }
}

/**
 * Helper function to build the block title.
 *
 * @param $uid
 *   The uid of the user account.  Defaults to the site form, $uid = 0.
 */
function _follow_block_subject($uid = 0) {
  return follow_link_title($uid) .':';
}

/**
 * Helper function to build the block content display.
 *
 * @param string $alignment
 *   The alignment of the icons, vertical or horizontal.
 * @param string $style
 *   The style of the icons, small, large, etc.
 * @param $uid
 *   The uid of the user account. Defaults to the site form, $uid = 0.
 * @return array
 *   A renderable array of follow links.
 */
function _follow_block_content($type, $uid = 0) {
  $element = array();

  if ($links = FollowLink::load($uid)) {
    $element = _follow_links_element($links,
      follow_networks_load($uid),
      $type
    );
  }

  return $element;
}

/**
 * Menu callback to generate Follow module CSS.
 */
function follow_css() {
  if ($destination = follow_save_css()) {

  }
  else {
    \Drupal::logger('follow')->notice('Unable to generate the Follow CSS located at %path.', array('%path' => $destination));
    drupal_add_http_header('Status', '500 Internal Server Error');
    print t('Error generating CSS.');
    drupal_exit();
  }
}

/**
 * Theme function to output a list of links.
 *
 * @param $links
 *   An array of follow link objects.
 * @param $networks
 *   An array of network names, keys are machine names, values are visible titles.
 * @param $alignment
 *   A string depicting whether the icons should be displayed in a "horizontal"
 *   or "vertical" list.
 *
 * @ingroup themeable
 */
function theme_follow_links(&$variables) {
  $element = _follow_links_element($variables['links'],
    $variables['networks'],
    $variables['type'],
    $variables['alignment']
  );

  return render($element);
}

/**
 * Theme function to print an individual link.
 *
 * @param $link
 *   A follow link object.
 * @param $title
 *   The translated title of the social network.
 *
 * @ingroup themable
 */
function theme_follow_link(&$variables) {
  $link = $variables['link'];
  $title = $variables['title'];
  $classes = array();
  $classes[] = 'follow-link';
  $classes[] = "follow-link-{$link->name}";
  $classes[] = $link->uid ? 'follow-link-user' : 'follow-link-site';
  $attributes = array(
    'class' => $classes,
    'title' => follow_link_title($link->uid) .' '. $title,
  );
  // Clean up the blank titles.
  if ($title == '<none>') {
    $title = '';
  }
  $link->options['attributes'] = $attributes;

  if ($link->lid == 1) {
//    $url = Url::fromRoute('rss.xml', $link->options);
//    $variables['link'] = \Drupal::l($title, $url);
    return '';
  }
  else {
    $url = Url::fromUri($link->path, $link->options);
    return \Drupal::l($title, $url, $link->options);
  }
}

/**
 * Implements hook_contextual_links_view_alter().
 *
 * @param $element
 *   A renderable array representing the contextual links.
 * @param $items
 *   An associative array containing the original contextual link items, as
 *   generated by menu_contextual_links(), which were used to build
 *   $element['#links'].
 */
function follow_contextual_links_view_alter(&$element, $items) { 
  // Add the Follow configuration links to both of the Follow blocks.
  $block = isset($element['#element']['#block']) ? $element['#element']['#block'] : NULL;
  if (is_object($block) && $block->module == 'follow') {
    $uid = arg(1);

    if ($block->delta == 'site' && \Drupal::currentUser()->hasPermission('edit site follow links')) {
      $element['#links']['follow-edit'] = array(
        'title' => t('Edit Follow links'),
        'href' => 'admin/config/services/follow',
        'query' => drupal_get_destination(),
        'attributes' => array(
          'title' => t('Configure the site-wide web service follow links.'),
        ),
      );
    }
    elseif ($block->delta == 'user' && follow_links_user_access($uid)) {
      $element['#links']['follow-edit'] = array(
        'title' => t('Edit Follow links'),
        'href' => 'user/' . $uid . '/follow',
        'query' => drupal_get_destination(),
        'attributes' => array(
          'title' => t('Update the associated web service follow links.'),
        ),
      );
    }
  }
}


/**
 * Implements hook_admin_paths().
 *
 * Have the Follow links for the user pop up in the Overlay.
 */
function follow_admin_paths() {
  $paths = array(
    'user/*/follow' => TRUE,
  );
  return $paths;
}


